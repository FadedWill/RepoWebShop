@model string
@inject ICatalogRepository catalog;
@{
    var products = catalog.GetAll();
    
    <div style="margin-top: 20px;"   class="alert alert-success">
        <h3>Comparación en catálogo de productos sin foto</h3>
        <table class="catalog-repo">
            <thead>
                <tr>
                    <th>Producto</th>
                    <th>Precio Internet</th>
                    <th>Precio en Sucursal</th>
                    <th>Tiempo de Preparación</th>
                    <th>Venta Online</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in products)
                {
                    <tr>
                        <td>
                            <a asp-action="Edit" asp-controller="Catalog" asp-route-id="@item.ProductId">
                                @Regex.Replace(item.Name.Normalize(NormalizationForm.FormD), @"[^a-zA-z0-9 ]+", "")
                            </a>
                        </td>
                        <td>
                            @item.Price
                        </td>
                        <td>
                            @item.PriceInStore
                        </td>
                        <td>
                            @item.PreparationTime
                        </td>
                        <td>
                            @if (item.IsOnSale)
                            {
                                <span class="fa fa-check"></span>
                            }
                            else
                            {
                                <span class="fa fa-times"></span>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <script>
        $("table.catalog-repo").DataTable({
            "language": {
                "url": "/Scripts/SpanishDatatables.json"
            },
            "order": [[0, "asc"]],
            "oSearch": { "sSearch": "@Regex.Replace(Model.Normalize(NormalizationForm.FormD), @"[^a-zA-z0-9 ]+", "")" }
        });
    </script>
}